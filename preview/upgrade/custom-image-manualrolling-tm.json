{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmssNamePrefix": {
      "type": "string",
      "maxLength": 12
    },
    "instanceCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of VM instances"
      }
    },
    "adminUsername": {
      "type": "string"
    },
    "sshKeyData": {
      "type": "string",
      "metadata": {
        "description": "SSH rsa public key file as a string."
      }
    },
    "imageResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource group, where compute Image is located."
      }
    },
    "imageName": {
      "type": "string",
      "metadata": {
        "description": "The name of the compute Image."
      }
    },
    "dnsPrefix": {
      "type": "string",
      "metadata": {
        "description": "DNS prefix for public IP."
      }
    },
    "cloudInit": {
      "type": "string",
      "metadata": {
        "description": "cloud-init initialization script."
      }
    }
  },
  "variables": {
    "pipName1": "[concat(variables('namingInfix'), 'pip1')]",
    "pipName2": "[concat(variables('namingInfix'), 'pip2')]",
    "managedImageId": "[resourceId(parameters('imageResourceGroup'), 'Microsoft.Compute/images', parameters('imageName'))]",
    "addressPrefix": "10.0.0.0/8",
    "namingInfix": "[toLower(parameters('vmssNamePrefix'))]",
    "newVNETName": "[concat(variables('namingInfix'), 'vnet')]",
    "tmName": "[concat(variables('namingInfix'), 'tm')]",
    "subnetName1": "subnet1",
    "subnetName2": "subnet2",
    "subnetPrefix1": "10.0.0.0/16",
    "subnetPrefix2": "10.1.0.0/16",
    "securityGroupName": "[concat(variables('namingInfix'), '-sg')]",
    "lbName1": "[concat(variables('namingInfix'), 'lb1')]",
    "lbName2": "[concat(variables('namingInfix'), 'lb2')]",
    "fepoolName": "FrontendPool",
    "feIpConfigName": "[concat(variables('fepoolName'), 'IpConfig')]",
    "bepoolName": "BackendPool",
    "lbProbeName": "lbProbe",
    "networkApiVersion": "2017-11-01",
    "computeApiVersion": "2017-12-01",
    "sshKeyPath": "[concat('/home/',parameters('adminUserName'),'/.ssh/authorized_keys')]",
    "lbNAT": "lbNAT"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('pipName1')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-1')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('pipName2')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefix'), '-2')]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('newVNETName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName1')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix1')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
              }
            }
          },
          {
            "name": "[variables('subnetName2')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix2')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('lbName1')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('pipName1'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
      ],
      "apiVersion": "[variables('networkApiVersion')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('feIpConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName1'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bepoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "HttpRule",
            "properties": {
              "loadDistribution": "Default",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName1')), '/frontendIPConfigurations/', variables('feIpConfigName'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName1')), '/backendAddressPools/', variables('bepoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName1')), '/probes/', variables('lbProbeName'))]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('lbProbeName')]",
            "properties": {
              "protocol": "Tcp",
              "port": 4444,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('lbNAT')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName1')), concat('/frontendIPConfigurations/', variables('feIpConfigName')))]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": 50100,
              "frontendPortRangeEnd": 50199,
              "backendPort": 22
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('lbName2')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('pipName2'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
      ],
      "apiVersion": "[variables('networkApiVersion')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('feIpConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName2'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bepoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "HttpRule",
            "properties": {
              "loadDistribution": "Default",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName2')), '/frontendIPConfigurations/', variables('feIpConfigName'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName2')), '/backendAddressPools/', variables('bepoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName2')), '/probes/', variables('lbProbeName'))]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('lbProbeName')]",
            "properties": {
              "protocol": "Tcp",
              "port": 4444,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('lbNAT')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName2')), '/frontendIPConfigurations/', variables('feIpConfigName'))]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": 50100,
              "frontendPortRangeEnd": 50199,
              "backendPort": 22
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('securityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "remoteConnection",
            "properties": {
              "description": "Allow SSH traffic",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "webTraffic",
            "properties": {
              "description": "Allow web traffic",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "[variables('computeApiVersion')]",
      "name": "[concat(parameters('vmssNamePrefix'), '1')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers/', variables('lbName1'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('newVNETName'))]"
      ],
      "sku": {
        "name": "Standard_DS1_v2",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "singlePlacementGroup": "true",
        "upgradePolicy": {
          "mode": "Rolling",
          "automaticOSUpgrade": "false",
          "rollingUpgradePolicy": {
            "maxBatchInstancePercent": 20,
            "maxUnhealthyInstancePercent": 20,
            "maxUnhealthyUpgradedInstancePercent": 20,
            "pauseTimeBetweenBatches": "PT0S"
          }
        },
        "overprovision": "true",
        "virtualMachineProfile": {
          "storageProfile": {
            "imageReference": {
              "id": "[variables('managedImageId')]"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[parameters('vmssNamePrefix')]",
            "adminUsername": "[parameters('adminUsername')]",
            "customData": "[base64(parameters('cloudInit'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[variables('sshKeyPath')]",
                    "keyData": "[parameters('sshKeyData')]"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "healthProbe": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('lbName1')), '/probes/', variables('lbProbeName'))]"
            },
            "networkInterfaceConfigurations": [
              {
                "name": "[concat('nic', parameters('vmssNamePrefix'))]",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "[concat('ipconfig', parameters('vmssNamePrefix'))]",
                      "properties": {
                        "subnet": {
                          "Id": "[concat(resourceId('Microsoft.Network/virtualNetworks/', variables('newVNETName')), '/subnets/', variables('subnetName1'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName1')), '/backendAddressPools/', variables('bepoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatPools', variables('lbName1'), concat(variables('lbNAT')))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "MSILinuxExtension",
                "properties": {
                  "publisher": "Microsoft.ManagedIdentity",
                  "type": "ManagedIdentityExtensionForLinux",
                  "typeHandlerVersion": "1.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "port": 50342
                  },
                  "protectedSettings": {}
                }
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "[variables('computeApiVersion')]",
      "name": "[concat(parameters('vmssNamePrefix'), '2')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers/', variables('lbName2'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('newVNETName'))]"
      ],
      "sku": {
        "name": "Standard_DS1_v2",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "singlePlacementGroup": "true",
        "upgradePolicy": {
          "mode": "Rolling",
          "automaticOSUpgrade": "false",
          "rollingUpgradePolicy": {
            "maxBatchInstancePercent": 20,
            "maxUnhealthyInstancePercent": 20,
            "maxUnhealthyUpgradedInstancePercent": 20,
            "pauseTimeBetweenBatches": "PT0S"
          }
        },
        "overprovision": "true",
        "virtualMachineProfile": {
          "storageProfile": {
            "imageReference": {
              "id": "[variables('managedImageId')]"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[parameters('vmssNamePrefix')]",
            "adminUsername": "[parameters('adminUsername')]",
            "customData": "[base64(parameters('cloudInit'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[variables('sshKeyPath')]",
                    "keyData": "[parameters('sshKeyData')]"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "healthProbe": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName2')), '/probes/', variables('lbProbeName'))]"
            },
            "networkInterfaceConfigurations": [
              {
                "name": "[concat('nic', parameters('vmssNamePrefix'))]",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "[concat('ipconfig', parameters('vmssNamePrefix'))]",
                      "properties": {
                        "subnet": {
                          "Id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('newVNETName')), '/subnets/', variables('subnetName2'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbName2')), '/backendAddressPools/', variables('bepoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatPools', variables('lbName2'), concat(variables('lbNAT')))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "MSILinuxExtension",
                "properties": {
                  "publisher": "Microsoft.ManagedIdentity",
                  "type": "ManagedIdentityExtensionForLinux",
                  "typeHandlerVersion": "1.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "port": 50342
                  },
                  "protectedSettings": {}
                }
              }
            ]
          }
        }
      }
    },
    {
      "apiVersion": "2015-11-01",
      "type": "Microsoft.Network/trafficManagerProfiles",
      "name": "[variables('tmName')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('pipName1'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('pipName2'))]"
      ],
      "properties": {
        "profileStatus": "Enabled",
        "trafficRoutingMethod": "Weighted",
        "dnsConfig": {
          "relativeName": "[parameters('dnsPrefix')]",
          "ttl": 30
        },
        "monitorConfig": {
          "protocol": "HTTP",
          "port": 80,
          "path": "/"
        },
        "endpoints": [
          {
            "name": "endpoint1",
            "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
            "properties": {
              "targetResourceId": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('pipName1')))]",
              "endpointStatus": "Enabled",
              "weight": 1
            }
          },
          {
            "name": "endpoint2",
            "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
            "properties": {
              "targetResourceId": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('pipName2')))]",
              "endpointStatus": "Enabled",
              "weight": 1
            }
          }
        ]
      }
    }
  ]
}